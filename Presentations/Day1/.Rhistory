leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points(), colour = pal)
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
pal <- colorQuantile("Oranges", NULL, n = 5)
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
pal <- colorQuantile("Oranges", NULL, n = 5)
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet(data = xx) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(fillColor = ~pal2(C_FIGLI),
fillOpacity = 0.3,
color = "#BBBDC5",
weight = 2,
popup = popup) %>%
addLegend("bottomright", pal = pal2, values = ~C_FIGLI,
title = "FIGLI",
#labFormat = labelFormat(prefix = "$"),
opacity = 1
)
})
}
shinyApp(ui, server)
library(tidyverse)
x <- readOGR(dsn = "Downloads/dati_torino/", layer = "circoscrizioni_famiglie_2007_geo")
xx<-spTransform(x,CRS("+proj=longlat +datum=WGS84"))
x <- readOGR(dsn = "Downloads/dati_torino/", layer = "circoscrizioni_famiglie_2007_geo")
library(sp)
library(rgdal)
library(leaflet)
x <- readOGR(dsn = "Downloads/dati_torino/", layer = "circoscrizioni_famiglie_2007_geo")
getwd()
x <- readOGR(dsn = "Downloads/dati_torino/", layer = "circoscrizioni_famiglie_2007_geo")
library(leaflet)
your.map <- leaflet() %>% addTiles()
your.map # print the map
library(rgdal)
library(maps)
# Fetch the route of the PCT and convert it into a SpatialLine object
url <- "http://hiking.waymarkedtrails.org/en/routebrowser/1225378/gpx"
download.file(url, destfile = "pct.gpx", method = "wget")
pct <- readOGR("pct.gpx", layer = "tracks")
# Import list with shapefiles of the three states the PCT is crossing
mapStates <- map("state", fill = TRUE,
plot = FALSE,
region = c('california', 'oregon', 'washington:main'))
your.map <- leaflet(pct) %>%
# Add layer
addTiles(urlTemplate = "http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addPolylines(color="red", popup="PCT")  %>%
addMarkers(-116.4697, 32.60758, popup = "Campo") %>%
addMarkers(-120.7816, 49.06465, popup = "Manning Park, Canada") %>%
addPolygons(data=mapStates, fillColor = heat.colors(3, alpha = NULL), stroke = FALSE) %>%
# Add legend
addLegend(position = 'topright', colors = "red", labels = "PCT", opacity = 0.4,
title = 'Legend')
your.map
your.map <- leaflet(pct) %>%
# Add tiles as baseGroup
addProviderTiles("OpenTopoMap", group = "MapQuestOpen.Aerial") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "MapQuestOpen.Aerial") %>%
addProviderTiles("OpenMapSurfer.Roads", group = "OpenMapSurfer.Roads") %>%
# Add layers as overlayGroup
addPolylines(color="red", , weight = 4,  popup="PCT", , group = "PCT")  %>%
addMarkers(-116.4697, 32.60758, popup = "Campo", group="Southern Terminus") %>%
addMarkers(-120.7816, 49.06465, popup = "Manning Park, Canada", group="Northern Terminus") %>%
hideGroup("Southern Terminus") %>%
hideGroup("Northern Terminus") %>%
addPolygons(data=mapStates, fillColor = heat.colors(3, alpha = NULL), stroke = FALSE,
group = "States")  %>%
# Layers control
addLayersControl(
baseGroups = c("MapQuestOpen.Aerial", "OpenTopoMap", "OpenMapSurfer.Roads"),
overlayGroups = c("PCT", "Southern Terminus", "Northern Terminus", "States"),
options = layersControlOptions(collapsed = FALSE)
)
your.map
library(leaflet)
library(animation)
library(png)
library(htmlwidgets)
library(webshot)
library(ggmap)
saveGIF({
for (i in 1:376) {
map  = leaflet() %>%
addTiles() %>%
setView(lng = lon_lat[1,2], lat = lon_lat[1,1], zoom = 5)%>%
addMarkers(lng = lon_lat[lon_lat$day == i,2],lat = lon_lat[lon_lat$day == i,1])
saveWidget(map, 'temp.html', selfcontained = FALSE) ## save the html
webshot('temp.html', file=sprintf('Rplot%02d.png', 1),cliprect = 'viewport') ## save as png
img = readPNG("Rplot01.png") ### read the png
plot(ggimage(img)) ###reading png file
}
})
install.packages("webshot")
library(leaflet)
library(animation)
library(png)
library(htmlwidgets)
library(webshot)
library(ggmap)
saveGIF({
for (i in 1:376) {
map  = leaflet() %>%
addTiles() %>%
setView(lng = lon_lat[1,2], lat = lon_lat[1,1], zoom = 5)%>%
addMarkers(lng = lon_lat[lon_lat$day == i,2],lat = lon_lat[lon_lat$day == i,1])
saveWidget(map, 'temp.html', selfcontained = FALSE) ## save the html
webshot('temp.html', file=sprintf('Rplot%02d.png', 1),cliprect = 'viewport') ## save as png
img = readPNG("Rplot01.png") ### read the png
plot(ggimage(img)) ###reading png file
}
})
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
library(shiny)
library(xts)
library(leaflet)
library(dplyr)
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
library(shiny)
library(xts)
library(leaflet)
library(dplyr)
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
ui <- fluidPage(
sliderInput("time", "date",min(date),
max(date),
value = max(date),
step=1,
animate=T),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
data_a1 %>%
filter(Date==input$time)
})
output$mymap <- renderLeaflet({
leaflet() %>%
addMarkers(data = points(),popup=as.character(points()$a))
})
}
shinyApp(ui, server)
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
ui <- fluidPage(
sliderInput("time", "date",min(date),
max(date),
value = max(date),
step=1,
animate=T),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
data_a1 %>%
filter(Date==input$time)
})
output$mymap <- renderLeaflet({
leaflet() %>%
addMarkers(data = points(),popup=as.character(points()$a))
})
}
shinyApp(ui, server)
df
data_a1
your.map
your.map <- leaflet(pct) %>%
# Add tiles as baseGroup
addProviderTiles("OpenTopoMap", group = "MapQuestOpen.Aerial") %>%
addProviderTiles("MapQuestOpen.Aerial", group = "MapQuestOpen.Aerial") %>%
addProviderTiles("OpenMapSurfer.Roads", group = "OpenMapSurfer.Roads") %>%
# Add layers as overlayGroup
addPolylines(color="red", , weight = 4,  popup="PCT", , group = "PCT")  %>%
addMarkers(-116.4697, 32.60758, popup = "Campo", group="Southern Terminus") %>%
addMarkers(-120.7816, 49.06465, popup = "Manning Park, Canada", group="Northern Terminus") %>%
hideGroup("Southern Terminus") %>%
hideGroup("Northern Terminus") %>%
addPolygons(data=mapStates, fillColor = heat.colors(3, alpha = NULL), stroke = FALSE,
group = "States")  %>%
# Layers control
addLayersControl(
baseGroups = c("MapQuestOpen.Aerial", "OpenTopoMap", "OpenMapSurfer.Roads"),
overlayGroups = c("PCT", "Southern Terminus", "Northern Terminus", "States"),
options = layersControlOptions(collapsed = FALSE)
)
your.map
data_a1
library(shiny)
library(xts)
library(leaflet)
library(dplyr)
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
ui <- fluidPage(
sliderInput("time", "date",min(date),
max(date),
value = max(date),
step=1,
animate=T),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
data_a1 %>%
filter(Date==input$time)
})
output$mymap <- renderLeaflet({
leaflet() %>%
addMarkers(data = points(),popup=as.character(points()$a))
})
}
shinyApp(ui, server)
library(shiny)
library(xts)
library(leaflet)
library(dplyr)
date<-seq(as.Date("2015-01-01"), as.Date("2015-01-10"), by="day")
a<-xts(1:10,order.by=date)
df = data.frame(Lat = rnorm(1)+10, Long = rnorm(1),Id=a)
data_a<-data.frame(a)
data_a1<-data_a %>%
mutate("Lat" =as.numeric(df[1,1]),"Long"=as.numeric(df[2,1]),"Date"=rownames(data_a))
ui <- fluidPage(
sliderInput("time", "date",min(date),
max(date),
value = max(date),
step=1,
animate=T),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
data_a1 %>%
filter(Date==input$time)
})
output$mymap <- renderLeaflet({
leaflet(df) %>%
addMarkers(data = points(),popup=as.character(points()$a))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("time", "date",min(date),
max(date),
value = max(date),
step=1,
animate=T),
leafletOutput("mymap")
)
server <- function(input, output, session) {
points <- reactive({
data_a1 %>%
filter(Date==input$time)
})
output$mymap <- renderLeaflet({
leaflet(df) %>%
addMarkers(data = points(),popup=as.character(points()$a))
})
}
shinyApp(ui, server)
your.map
mapStates
install.packages("Rfacebook")
library("Rfacebook")
token <- 'EAACEdEose0cBAHgUAPDsfbIbJZBZBuxRlV3ZB61bhpECYjwicWKkPUhNhnZCM0Ru2vPevgQmNvarlVdQpoeZCArevqmVcr1VDj3feEZA09NZCn4wKa7I0LtX5ZCUsSj2oawjBiaQbnEvlBlCbip29jeIXNZAWCQYVZCLQivrZCtajP4rUD8mYC62ZCNt'
me <- getUsers("me", token, private_info=TRUE)
me$name # my name
me$hometown # my hometown
me$gender
me$relationship_status
getUsers(c("barackobama", "donaldtrump"), token)
my_friends <- getFriends(token, simplify = TRUE)
head(my_friends$id, n = 1) # get lowest user ID
head(my_friends$name, n = 1) # get lowest user ID
head(my_friends$name, n = 10) # get lowest user ID
my_friends_info <- getUsers(my_friends$id, token, private_info = TRUE)
my_friends_info
table(my_friends_info$gender)  # gender
table(substr(my_friends_info$locale, 1, 2))  # language
table(substr(my_friends_info$locale, 4, 5))  # country
table(my_friends_info$relationship_status)  # relationship status
page <- getPage("humansofnewyork", token, n = 5000)
page <- getPage("humansofnewyork", token, n = 50)
page[which.max(page$likes_count), ]
page <- getPage("GraphotSpoonRiver", token, n = 5000)
page <- getPage("graphot.editrice", token, n = 5000)
page[which.max(page$likes_count), ]
page[which.min(page$likes_count), ]
page <- getPage("graphot.editrice", token, n = 5000)
page[which.min(page$likes_count), ]
page$likes_count
page$created_time
page[page$created_time == "2017-02-11T10:53:00+0000",]
page[grepl("2017-02-11", page$created_time),]
page[grepl("2017-02-09", page$created_time),]
## convert Facebook date format to R date format
format.facebook.date <- function(datestring) {
date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
}
## aggregate metric counts over month
aggregate.metric <- function(metric) {
m <- aggregate(page[[paste0(metric, "_count")]], list(month = page$month),
mean)
m$month <- as.Date(paste0(m$month, "-15"))
m$metric <- metric
return(m)
}
page$datetime <- format.facebook.date(page$created_time)
page
page$month <- format(page$datetime, "%Y-%m")
df.list <- lapply(c("likes", "comments", "shares"), aggregate.metric)
df <- do.call(rbind, df.list)
library(ggplot2)
library(scales)
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) +
scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post",
breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
page <- getPage("humansofnewyork", token, n = 5000)
page[grepl("2017-02-09", page$created_time),]
format.facebook.date <- function(datestring) {
date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
}
aggregate.metric <- function(metric) {
m <- aggregate(page[[paste0(metric, "_count")]], list(month = page$month),
mean)
m$month <- as.Date(paste0(m$month, "-15"))
m$metric <- metric
return(m)
}
page$datetime <- format.facebook.date(page$created_time)
page$month <- format(page$datetime, "%Y-%m")
df.list <- lapply(c("likes", "comments", "shares"), aggregate.metric)
df <- do.call(rbind, df.list)
library(ggplot2)
library(scales)
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric))
df
head(df)
token <- 'EAACEdEose0cBAHgUAPDsfbIbJZBZBuxRlV3ZB61bhpECYjwicWKkPUhNhnZCM0Ru2vPevgQmNvarlVdQpoeZCArevqmVcr1VDj3feEZA09NZCn4wKa7I0LtX5ZCUsSj2oawjBiaQbnEvlBlCbip29jeIXNZAWCQYVZCLQivrZCtajP4rUD8mYC62ZCNt'
me <- getUsers("me", token, private_info=TRUE)
library("Rfacebook")
me <- getUsers("me", token, private_info=TRUE)
page <- getPage("humansofnewyork", token, n = 2000)
format.facebook.date <- function(datestring) {
date <- as.POSIXct(datestring, format = "%Y-%m-%dT%H:%M:%S+0000", tz = "GMT")
}
aggregate.metric <- function(metric) {
m <- aggregate(page[[paste0(metric, "_count")]], list(month = page$month),
mean)
m$month <- as.Date(paste0(m$month, "-15"))
m$metric <- metric
return(m)
}
page$datetime <- format.facebook.date(page$created_time)
page$month <- format(page$datetime, "%Y-%m")
df.list <- lapply(c("likes", "comments", "shares"), aggregate.metric)
df <- do.call(rbind, df.list)
library(ggplot2)
library(scales)
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric))
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y"))
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw()
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
head(df)
page$datetime
page$month
df.list
df <- do.call(rbind, df.list)
ggplot(df, aes(x = month, y = x, group = metric)) + geom_line(aes(color = metric)) + scale_x_date(date_breaks = "years", labels = date_format("%Y")) + scale_y_log10("Average count per post", breaks = c(10, 100, 1000, 10000, 50000)) + theme_bw() + theme(axis.title.x = element_blank())
group <- getGroup("150048245063649", token, n=50)
group
callAPI("https://graph.facebook.com/v2.0/barackobama?fields=id", token)
?getInsights
insights <- getInsights(object_id='221568044327801_754789777921289',
token=token, metric='post_impressions', period='days_28')
insights <- getInsights(object_id='150048245063649',
token=token, metric='post_impressions', period='days_28')
install.packages("googleAuthR")
install.packages("googleAnalyticsR")
devtools::install_github("MarkEdmondson1234/googleAnalyticsR")
library(googleAnalyticsR)
ga_auth()
account_list <- google_analytics_account_list()
ga_auth()
library(googleAnalyticsR)
## This should send you to your browser to authenticate your email.
## Authenticate with an email that has access to the Google Analytics View you want to use.
ga_auth()
?ga_auth
ga_auth(new_user = TRUE)
account_list <- google_analytics_account_list()
ga_id <- account_list[23,'viewId']
ga_id
account_list
meta <- google_analytics_meta()
meta
account_list <- google_analytics_account_list()
account_list
sampled_data_fetch <- google_analytics_4(id,
date_range = c(“2015-01-01”,”2015-06-21"),
metrics = c("users","sessions","bounceRate"),
dimensions = c("date","landingPagePath","source"))
sampled_data_fetch <- google_analytics_4(id, date_range = c(“2015-01-01”,”2015-06-21"), metrics = c("users","sessions","bounceRate"), dimensions = c("date","landingPagePath","source"))
sampled_data_fetch <- google_analytics_4(id, date_range = c("2015-01-01","2015-06-21"), metrics = c("users","sessions","bounceRate"), dimensions = c("date","landingPagePath","source"))
library(googleAuthR)
library(googleAnalyticsR)
library(shiny)
shinyServer(function(input, output, session){
## Get auth code from return URL
access_token  <- callModule(googleAuth, "auth1")
gadata <- reactive({
with_shiny(google_analytics,
id = "222222", ## replace with your View ID
start="2015-08-01", end="2015-08-02",
metrics = c("sessions", "bounceRate"),
dimensions = c("source", "medium"),
shiny_access_token = access_token())
})
output$something <- renderPlot({
## only trigger once authenticated
req(access_token())
gadata <- gadata()
plot(gadata)
})
## ui.R
library(googleAuthR)
library(shiny)
shinyUI(fluidPage(
googleAuthUI("auth1"),
plotOutput("something")
))
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
p <- qplot(carat, price, data=dsamp, colour=clarity)
p <- ggplotly(p)
ggplotly(p)
getwd()
setwd("~/Documents/Courses/2017_PhD_Toolbox_course/Presentations/Day1")
library(knitr)
knit("R_intro.Rnw")
Sweave("R_intro.Rnw")
render("R_intro.Rnw", ouput_format = "pdf")
library(rmarkdown)
render("R_intro.Rnw", ouput_format = "pdf")
?render
tools::texi2pdf("R_intro.tex")
